// This file is @generated by prost-build.
#[allow(non_camel_case_types)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeId {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub namespace: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
}
#[allow(non_camel_case_types)]
#[derive(Eq, Hash)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterName {
    #[prost(string, tag = "1")]
    pub namespace: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub cluster_name: ::prost::alloc::string::String,
}
#[allow(non_camel_case_types)]
#[derive(Eq, Hash)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DBLocation {
    #[prost(string, tag = "1")]
    pub region: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub available_zone: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub namespace: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub node_name: ::prost::alloc::string::String,
}
#[allow(non_camel_case_types)]
#[derive(Eq, Hash, serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TenantKey {
    #[prost(string, tag = "1")]
    pub region: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub available_zone: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub namespace: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub cluster_name: ::prost::alloc::string::String,
}
/// ServiceExpose In a cloud that relies on an existing cloud service such as AWS ELB;
/// this message can be extended because each cloud provider has a different property.
#[allow(non_camel_case_types)]
#[derive(Eq, Hash)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceExpose {
    #[prost(string, tag = "1")]
    pub addr: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub port: i32,
}
#[allow(non_camel_case_types)]
#[derive(Eq, Hash)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Endpoint {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub port_name: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub port: i32,
}
#[allow(non_camel_case_types)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceSecrets {
    #[prost(string, tag = "1")]
    pub user: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
}
#[allow(non_camel_case_types)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DBService {
    #[prost(message, optional, tag = "1")]
    pub location: ::core::option::Option<DBLocation>,
    #[prost(string, tag = "2")]
    pub cluster: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub service: ::prost::alloc::string::String,
    #[prost(enumeration = "ServiceStatus", tag = "4")]
    pub status: i32,
    #[prost(message, optional, tag = "5")]
    pub expose: ::core::option::Option<ServiceExpose>,
    #[prost(message, optional, tag = "6")]
    pub secrets: ::core::option::Option<ServiceSecrets>,
    #[prost(message, repeated, tag = "7")]
    pub endpoints: ::prost::alloc::vec::Vec<Endpoint>,
    #[prost(map = "string, string", tag = "8")]
    pub payload: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[allow(non_camel_case_types)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DBServiceList {
    #[prost(message, repeated, tag = "1")]
    pub service_list: ::prost::alloc::vec::Vec<DBService>,
}
#[allow(non_camel_case_types)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceChangeEvent {
    #[prost(message, optional, tag = "1")]
    pub service: ::core::option::Option<DBService>,
    #[prost(message, optional, tag = "2")]
    pub event_timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(non_camel_case_types)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Response {
    #[prost(int32, tag = "1")]
    pub status: i32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(oneof = "response::Payload", tags = "3, 4, 5")]
    pub payload: ::core::option::Option<response::Payload>,
}
/// Nested message and enum types in `Response`.
pub mod response {
    #[allow(non_camel_case_types)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        #[prost(message, tag = "3")]
        ServiceList(super::DBServiceList),
        #[prost(message, tag = "4")]
        ChangeEvent(super::ServiceChangeEvent),
        #[prost(message, tag = "5")]
        NoData(()),
    }
}
#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ServiceStatus {
    UnKnowStatus = 0,
    NotReady = 1,
    Ready = 2,
    Offline = 3,
}
impl ServiceStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ServiceStatus::UnKnowStatus => "UnKnowStatus",
            ServiceStatus::NotReady => "NotReady",
            ServiceStatus::Ready => "Ready",
            ServiceStatus::Offline => "Offline",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UnKnowStatus" => Some(Self::UnKnowStatus),
            "NotReady" => Some(Self::NotReady),
            "Ready" => Some(Self::Ready),
            "Offline" => Some(Self::Offline),
            _ => None,
        }
    }
}
